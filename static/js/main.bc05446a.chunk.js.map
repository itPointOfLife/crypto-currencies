{"version":3,"sources":["components/CryptoTable.tsx","components/Converter.tsx","reducer/index.ts","fetchCoin/index.ts","App.tsx","index.tsx"],"names":["CryptoTable","currencies","colors","handleClickRow","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","currency","index","hover","key","name","onClick","src","imageUrl","alt","fullName","length","price","volume24Hour","Converter","props","fromCurrency","toCurrency","handleChangeFrom","handleChangeTo","fromAmount","toAmount","onUpdateFromTextField","onUpdateToTextField","FormControl","TextField","type","label","value","onChange","InputLabel","shrink","id","Select","labelId","MenuItem","state","action","payload","amount","isFromCurrency","exchangeRate","curColors","getColors","data","Promise","resolve","reject","fetch","then","json","coins","Data","coin","CoinInfo","Name","FullName","ImageUrl","Number","RAW","USD","PRICE","toFixed","parseInt","VOLUME24HOUR","catch","error","response","console","log","headers","request","message","config","App","React","useReducer","reducer","dispatch","useEffect","fromPrice","toPrice","filter","updateCurrenciesAndColors","a","getData","prevData","newData","forEach","array","order","sort","b","A","B","findIndex","obj","setInterval","Container","maxWidth","Grid","container","spacing","item","sm","md","Typography","variant","gutterBottom","currencyName","e","target","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc05446a.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nimport Table from \"@material-ui/core/Table\"\r\nimport TableBody from \"@material-ui/core/TableBody\"\r\nimport TableCell from \"@material-ui/core/TableCell\"\r\nimport TableContainer from \"@material-ui/core/TableContainer\"\r\nimport TableHead from \"@material-ui/core/TableHead\"\r\nimport TableRow from \"@material-ui/core/TableRow\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\n\r\nimport { TCoin } from '../types'\r\n\r\nconst CryptoTable = ({currencies, colors, handleClickRow}) => {\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className=\"table\" aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell></TableCell>\r\n            <TableCell align=\"left\">Name</TableCell>\r\n            <TableCell align=\"left\">Full Name</TableCell>\r\n            <TableCell align=\"left\">Price</TableCell>\r\n            <TableCell align=\"left\">Volume 24 Hour</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {currencies.map((currency:TCoin, index:number) => (\r\n            <TableRow \r\n              hover \r\n              className=\"row-currency\" \r\n              key={currency.name}\r\n              onClick={()=>handleClickRow(currency.name)}\r\n            >\r\n              <TableCell>\r\n                <img className=\"currency-icon\" src={currency.imageUrl} alt=\"Coin icon\" />\r\n              </TableCell>\r\n              <TableCell align=\"left\">{currency.name}</TableCell>\r\n              <TableCell align=\"left\">{currency.fullName}</TableCell>\r\n              <TableCell className={colors.length?colors[index]?colors[index]+\"-column\":'':''} align=\"left\">{\"$\"+currency.price}</TableCell>\r\n              <TableCell align=\"left\">{currency.volume24Hour}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default CryptoTable;\r\n","import React from \"react\"\r\n\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Select from \"@material-ui/core/Select\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport InputLabel from \"@material-ui/core/InputLabel\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\n\r\nimport {TCoin} from '../types'\r\n\r\nconst Converter = (props) => {\r\n  const {\r\n    currencies,\r\n    fromCurrency,\r\n    toCurrency,\r\n    handleChangeFrom,\r\n    handleChangeTo,\r\n    fromAmount,\r\n    toAmount,\r\n    onUpdateFromTextField,\r\n    onUpdateToTextField\r\n  } = props\r\n\r\n  return (\r\n    <Paper className=\"paper\">\r\n      <div className=\"crypto-input-box\">\r\n        <FormControl className=\"currency-input\">\r\n          <TextField\r\n            type=\"number\"\r\n\t\t\t\t\t\tlabel=\"Сумма\"\r\n\t\t\t\t\t\tvalue={fromAmount}\r\n\t\t\t\t\t\tonChange={onUpdateFromTextField}\r\n          />\r\n        </FormControl>\r\n        <FormControl className=\"currency-type\">\r\n          <InputLabel shrink id=\"demo-simple-select-label\">\r\n            Валюта\r\n          </InputLabel>\r\n          <Select \r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={fromCurrency}\r\n            onChange={handleChangeFrom}\r\n          >\r\n            {currencies.map((currency:TCoin) => (\r\n              <MenuItem \r\n                key={currency.name+currency.fullName} \r\n                value={currency.name}\r\n              >{currency.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div className=\"crypto-input-box\">\r\n        <FormControl className=\"currency-input\">\r\n\t\t\t\t\t<TextField \r\n\t\t\t\t\t\ttype=\"number\" \r\n\t\t\t\t\t\tlabel=\"Сумма\" \r\n\t\t\t\t\t\tvalue={toAmount}\r\n\t\t\t\t\t\tonChange={onUpdateToTextField}\r\n\t\t\t\t\t/>\r\n        </FormControl>\r\n        <FormControl className=\"currency-type\">\r\n          <InputLabel shrink id=\"demo-simple-select-label\">\r\n            Валюта\r\n          </InputLabel>\r\n          <Select \r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={toCurrency}\r\n            onChange={handleChangeTo}\r\n          >\r\n            {currencies.map((currency:TCoin) => (\r\n              <MenuItem \r\n                key={currency.name+currency.price} \r\n                value={currency.name}\r\n              >{currency.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","import { TCoin } from \"../types\";\r\n\r\ntype State = {\r\n  currencies: TCoin[],\r\n  colors: string[],\r\n  fromCurrency: string,\r\n  toCurrency: string,\r\n  amount: number,\r\n  isFromCurrency: boolean,\r\n  exchangeRate: number,\r\n}\r\n\r\ntype Action = {\r\n\ttype: string;\r\n\tpayload: any;\r\n};\r\n\r\nexport default (state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case 'SET_INIT_DATA': \r\n      return {\r\n        ...state,\r\n        currencies: action.payload.currencies,\r\n        fromCurrency: action.payload.fromCurrency,\r\n        toCurrency: action.payload.toCurrency,\r\n      }\r\n    case 'SET_FROM_CURRENCY': \r\n      return {\r\n        ...state,\r\n        fromCurrency: action.payload\r\n      }\r\n    case 'SET_TO_CURRENCY': \r\n      return {\r\n        ...state,\r\n        toCurrency: action.payload\r\n      }\r\n    case 'SET_AMOUNT': \r\n      return {\r\n        ...state,\r\n        amount: action.payload\r\n      }\r\n    case 'SET_IS_FROM_CURRENCY': \r\n      return {\r\n        ...state,\r\n        isFromCurrency: action.payload\r\n      }\r\n    case 'UPDATE_EXCHANGE_RATE': \r\n      return {\r\n        ...state,\r\n        exchangeRate: action.payload\r\n      }\r\n    case 'SET_CURRENCIES': \r\n      return {\r\n        ...state,\r\n        currencies: action.payload\r\n      }\r\n    case 'UPDATE_CURRENCIES_AND_COLORS':\r\n      const curColors = action.payload.getColors(state.currencies, action.payload.data); //newData for sort tests\r\n\r\n      if(curColors){\r\n        return {\r\n          ...state,\r\n          colors: curColors,\r\n          currencies: action.payload.data\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        currencies: action.payload.data\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};","import {TCoin} from '../types'\r\n\r\nexport default () => {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD\")\r\n    .then(data=>data.json())\r\n    .then(data => {\r\n      const coins: TCoin[] = data.Data.map((coin: any) => {\r\n        const obj: TCoin = {\r\n          name: coin.CoinInfo.Name,\r\n          fullName: coin.CoinInfo.FullName,\r\n          imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n          price: Number(coin.RAW.USD.PRICE.toFixed(3)),\r\n          volume24Hour: parseInt(coin.RAW.USD.VOLUME24HOUR),\r\n        };\r\n        return obj;\r\n      });\r\n      resolve(coins);\r\n    })\r\n    .catch(error => {\r\n      if (error.response)\r\n        console.log(error.response.headers);\r\n      else if (error.request) \r\n        console.log(error.request);\r\n      else \r\n        console.log(error.message);\r\n      \r\n      console.log(error.config);\r\n\r\n      resolve([])\r\n    });\r\n  });\r\n};\r\n","import React from \"react\"\n\nimport Container from \"@material-ui/core/Container\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Typography from '@material-ui/core/Typography'\n\nimport CryptoTable from \"./components/CryptoTable\"\nimport Converter from \"./components/Converter\"\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\n\nimport reducer from \"./reducer/\"\nimport getData from \"./fetchCoin/\"\n\nimport { TCoin } from \"./types/\"\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, {\n    currencies: [],\n    colors: [],\n    fromCurrency: \"\",\n    toCurrency: \"\",\n    amount: 1,\n    isFromCurrency: true,\n    exchangeRate: 0,\n  });\n\n  // Callback function from CryptoTable component\n  const handleClickRow = (currencyName: string) => {\n    dispatch({\n      type: \"SET_FROM_CURRENCY\",\n      payload: currencyName,\n    });\n  };\n\n  // Callback functions from Converter component\n  const handleChangeFrom = (e: any) => {\n    dispatch({\n      type: \"SET_FROM_CURRENCY\",\n      payload: e.target.value,\n    });\n  };\n\n  const handleChangeTo = (e: any) => {\n    dispatch({\n      type: \"SET_TO_CURRENCY\",\n      payload: e.target.value,\n    });\n  };\n\n  const onUpdateFromTextField = (e: any) => {\n    dispatch({\n      type: \"SET_AMOUNT\",\n      payload: e.target.value,\n    });\n\n    dispatch({\n      type: \"SET_IS_FROM_CURRENCY\",\n      payload: true,\n    });\n  };\n\n  const onUpdateToTextField = (e: any) => {\n    dispatch({\n      type: \"SET_AMOUNT\",\n      payload: e.target.value,\n    });\n\n    dispatch({\n      type: \"SET_IS_FROM_CURRENCY\",\n      payload: false,\n    });\n  };\n\n  // Input prices\n  let fromAmount: number = 0,\n    toAmount: number = 0;\n\n  // Update exchange rate each time when data or selected options values changes\n  React.useEffect(() => {\n    let fromPrice: number = 0,\n      toPrice: number = 0;\n\n    state.currencies.filter((currency: TCoin) => {\n      if (currency.name === state.fromCurrency) {\n        fromPrice = currency.price;\n      }\n\n      if (currency.name === state.toCurrency) {\n        toPrice = currency.price;\n      }\n      return false;\n    });\n\n    dispatch({\n      type: \"UPDATE_EXCHANGE_RATE\",\n      payload: fromPrice / toPrice,\n    });\n  }, [state.fromCurrency, state.toCurrency, state.currencies]);\n\n  // Update the value of each input by exchange rate\n  if (state.exchangeRate && state.amount) {\n    if (state.isFromCurrency) {\n      fromAmount = state.amount;\n      toAmount = state.amount * state.exchangeRate;\n    } else {\n      fromAmount = state.amount / state.exchangeRate;\n      toAmount = state.amount;\n    }\n  }\n\n  // Update currencies and collors values\n  const updateCurrenciesAndColors = async () => {\n    const data = await getData();\n\n    console.log(\"Data has updated :)\");\n\n    const getColors = (prevData: TCoin[], newData: TCoin[]) => {\n      const colors: string[] = [];\n\n      // Sort function for a possible bad data\n      const mapOrder = (array: TCoin[], order: TCoin[], key: string) => {\n        array.sort((a, b) => {\n          const A = a[key],\n            B = b[key];\n\n          if (order.findIndex((obj) => obj[key] === A) > order.findIndex((obj) => obj[key] === B)) {\n            return 1;\n          } else {\n            return -1;\n          }\n        });\n        return array;\n      };\n\n      // Set collors array by comparison old and new data\n      prevData.forEach((currency, index) => {\n        if (currency.name !== newData[index].name) \n          prevData = mapOrder(prevData, newData, \"name\")\n\n        if (currency.price > newData[index].price)\n          colors[index] = \"red\";\n        else if (currency.price < newData[index].price)\n          colors[index] = \"green\";\n      });\n\n      if (colors.length) return colors;\n      else return false;\n    };\n\n    dispatch({\n      type: \"UPDATE_CURRENCIES_AND_COLORS\",\n      payload: { data, getColors },\n    });\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      const data: any = await getData();\n\n      // Check for valid data\n      if (data.length) {\n        dispatch({\n          type: \"SET_INIT_DATA\",\n          payload: {\n            currencies: data,\n            fromCurrency: data[0].name,\n            toCurrency: data[1].name,\n          },\n        });\n\n        // Update data every 30sec\n        setInterval(updateCurrenciesAndColors, 30 * 1000);\n      } else {\n        dispatch({\n          type: \"SET_CURRENCIES\",\n          payload: data,\n        });\n      }\n    })();\n  }, []);\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid\n        container\n        spacing={3}\n        className={state.currencies.length ? \"grid-container\" : \"preloader-container\"}\n      >\n        {state.currencies.length ? (\n          <>\n            <Grid item className=\"crypto-table-grid\" sm={12} md={8}>\n              <Typography align=\"center\" variant=\"h3\" component=\"h2\" gutterBottom>\n                Crypto Table\n              </Typography>\n              <CryptoTable\n                currencies={state.currencies}\n                colors={state.colors}\n                handleClickRow={handleClickRow}\n              ></CryptoTable>\n            </Grid>\n            <Grid item sm={12} md={4}>\n              <Typography className=\"converter-typography\" align=\"center\" variant=\"h4\" component=\"h2\" gutterBottom>\n                Converter\n              </Typography>\n              <Converter\n                currencies={state.currencies}\n                fromCurrency={state.fromCurrency ? state.fromCurrency : \"\"}\n                toCurrency={state.toCurrency ? state.toCurrency : \"\"}\n                handleChangeFrom={handleChangeFrom}\n                handleChangeTo={handleChangeTo}\n                fromAmount={fromAmount}\n                toAmount={toAmount}\n                onUpdateFromTextField={onUpdateFromTextField}\n                onUpdateToTextField={onUpdateToTextField}\n              ></Converter>\n            </Grid>\n          </>\n        ) : (\n          <CircularProgress />\n        )}\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}